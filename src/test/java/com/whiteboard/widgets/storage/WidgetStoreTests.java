package com.whiteboard.widgets.storage;

import com.whiteboard.widgets.model.PageInfo;
import com.whiteboard.widgets.model.Widget;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class WidgetStoreTests {

    private WidgetStore widgetStore;

    @BeforeEach
    void init() {
        widgetStore = new WidgetStore();
    }

    @Test
    public void get_forIdNotStored_returnNull() {
        assertEquals(null, widgetStore.get("x"));
    }

    @Test
    public void get_storedWidget_returnWidget() {
        Widget w = widgetStore.create(new Widget(1, 1, 1, 1));

        assertEquals(w, widgetStore.get(w.getId()));
    }

    @Test
    public void create_newWidget_returnWidgetWithAutoGeneratedValues() {
        Widget w = widgetStore.create(new Widget(1, 1, 1, 1));

        assertNotNull(w.getId());
        assertNotNull(w.getLastModificationDate());
        assertNotNull(w.getZ());
        assertEquals(0, w.getZ());
    }

    @Test
    public void update_whenFieldsChanged_returnUpdatedWidget() {
        Widget current = widgetStore.create(new Widget(1, 1, 1, 1));
        Widget update = new Widget(2, 2, 2, 2);
        update.setZ(2);
        Widget updated = widgetStore.update(update, current);

        assertEquals(2, updated.getX());
        assertEquals(2, updated.getY());
        assertEquals(2, updated.getZ());
        assertEquals(2, updated.getWidth());
        assertEquals(2, updated.getHeight());
    }

    @Test
    public void update_overrideZValue_shiftPreviousWidgetZ() {
        Widget w1 = widgetStore.create(new Widget(1, 1, 1, 1));
        Widget w2 = widgetStore.create(new Widget(1, 1, 1, 1));
        Widget w1Update = new Widget(w1.getX(), w1.getY(), w1.getWidth(), w1.getHeight());
        w1Update.setZ(w2.getZ());
        widgetStore.update(w1Update, w1);

        assertEquals(w1.getZ() + 1, widgetStore.get(w2.getId()).getZ());
    }

    @Test
    public void delete_forNotStoredWidget_returnNull() {
        assertEquals(null, widgetStore.delete("x"));
    }

    @Test
    public void delete_forStoredWidget_returnWidget() {
        Widget w = widgetStore.create(new Widget(1, 1, 1, 1));

        assertEquals(w, widgetStore.delete(w.getId()));
    }

    @Test
    public void getSorted_forStoredWidgets_returnSortedWidgetsByZ() {
        Widget w1 = widgetStore.create(new Widget(1, 1, 1, 1));
        Widget w2 = widgetStore.create(new Widget(1, 1, 1, 1));

        PageInfo pageInfo = new PageInfo();
        pageInfo.setPage(1);
        pageInfo.setSize(10);

        List<Widget> sortedWidgets = widgetStore.getAll(pageInfo);

        assertEquals(w1, sortedWidgets.get(0));
        assertEquals(w2, sortedWidgets.get(1));
    }
}
